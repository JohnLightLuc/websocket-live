/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('carpoolingsdk:server');
var http = require('http');
const https = require('https');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.use(function(req, res, next) {
    next();
});


/**
 * Create HTTP server.
 */
var server = http.createServer(app);
//var server = https.createServer(options, app);

/**
 * Create WebSocket server.
 */
const { Server } = require('socket.io');
const io = new Server(server);

io.on('connection', (socket) => {

    socket.on('join_room', (roomName) => {
        // Rejoindre une salle spécifique en utilisant le nom de la salle (paramètre personnalisé)
        socket.join(roomName);
        console.log(`Client a rejoint la salle : ${roomName}`);

        // Écoute de l'événement lorsque le conducteur partage sa position
        socket.on('position_update', (position) => {
            console.log("Postion on position_update: ", position);
            // Diffuser la mise à jour de position à tous les utilisateurs de confiance
            socket.to(roomName).emit('driver_position_update', position);
        });

        // Écoute de l'événement lorsque le conducteur arrête le partage
        socket.on('stop_sharing', () => {
            console.log("Driver stop_sharing. ");
            // socket.leave("room_" + roomToken);
            // Informer les utilisateurs de confiance que le partage de position a été arrêté
            socket.to(roomName).emit('driver_stopped_sharing');
        });
    });

    socket.on('disconnect', () => {
        console.log("Driver disconnected.");
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log("Server is running on " + bind)
}